\begin{tabular}{|c|l|c|c|l|l|l|l|}
\hline
\multirow{ 2}{*}{\parbox{\cellwidth}{}} & \multirow{ 2}{*}{\parbox{\cellwidth}{Guarantees}} & \multicolumn{1}{l|}{Documented file system expectations} & Workload & \multirow{ 2}{*}{\parbox{\cellwidth}{}} & Checker & \multirow{ 2}{*}{\parbox{\cellwidth}{}}Protocol (short description) \\ \cline{ 3- 4}\cline{ 6- 6}\cline{ 8- 8}
 &  & \multicolumn{1}{l|}{} & \multicolumn{1}{l|}{Parameters/Configurations tested} & Workload &  &  \\ \hline
Git & \multicolumn{1}{c|}{Fuzzy. Expected to work correctly on top of ordered file system, and with fsyncobjectfiles configuration. Manual recovery might be needed.} & Fully Ordered. fsyncobjectfiles offers some protection against unordered (66\% performance loss). & - & add two files; commit; & Remove lock files. status, show-ref, log, fsck, add, rm, commit, checkout. & \multicolumn{1}{c|}{(Explained in detail later)} \\ \hline
Mercurial & \multicolumn{1}{c|}{No promises on system crash. Manual recovery procedures listed in documentation. Two types of corruption: dirstate and repository.} & N/A & - &  & Remove lock files. Perform all documented manual recovery procedures, (short of restoring repository from backup, or cloning). Two checkers – dirstate corruption: status. repository corruption: show-ref, log, fsck, add, rm, commit, checkout. & Dirstate information: update-via-rename. Repository information: Journal information to multiple log files before updating data files. Journal files later renamed to `undo journals' to rewind a commit. \\ \hline
BerkeleyDB & \multicolumn{1}{c|}{Durability and consistency depending on workload parameters.} & Atomic writes within page boundaries. Checksum option relieves assumption (X\% performance loss). & SYNC, NO\_SYNC, WRITE\_NO\_SYNC; BTree, Hash; mmap() and no mmap() & Insert(enough key-value pairs to trigger multiple log file switches). Triggers level-zero compaction for LevelDB. & Switch on checksums, open with log recovery enabled, and retrieve all key-value pairs; check for sanity. Insert (two pairs) & \multicolumn{1}{c|}{Write-ahead logging} \\ \hline
LevelDB & \multicolumn{1}{c|}{Durability depending on workload parameters. Consistent and ordered always.} & None. & Sync = on/off &  & Do RecoverDB with checksum verification, retrieve all key-value pairs with checksum verification; check for sanity. Insert (two pairs) & Write-ahead-logging with multi-level background (parallel) compaction \\ \hline
LMDB & \multicolumn{1}{c|}{Durability and consistency depending on configuration.} & None. & Sync = on/off; metasync=on/off & Insert(three key-value pairs). Vacuum database. For GDBM. & Retrieve all key-value pairs; check for sanity. Insert (two pairs). Call environment.stat(). & Shadow paging multi-version concurrency control (two versions) \\ \hline
GDBM & Unclear consistency. Durability after completing insert, depending on workload parameters. & N/A & Sync = on/off &  & Retrieve all key-value pairs; check for sanity. Insert (two pairs). & Inserts: Append new data, update metadata in-place. Vacuum: Update-via-rename. \\ \hline
HSqlDB & Durability depending on workload parameters. Consistent and ordered always. & None. & \multicolumn{1}{l|}{Write delay = 0/500ms} & Insert multiple, big transactions & Retrieve transactions, insert two additional transactions. & Write-ahead logging, with multiple update-via-renames during checkpointing. \\ \hline
SQLite & Durability and consistency configurable. & \multicolumn{1}{l|}{None by default. Configurable, upto 250\% performance improvement.} & WAL/Rollback; Synchronous=Full,Normal & Insert transactions. Trigger checkpoint in WAL mode. &  & Rollback/WAL depending on configuration.  \\ \hline
Postgres & Durability configurable. Consistent always. & None. & Sync = on/off & Insert multiple, big transactions &  & \multicolumn{1}{c|}{Write-ahead logging} \\ \hline
VMWare & Host-caching configurable. FLUSH commands consistent and durable without host-caching. & None. & \multicolumn{1}{l|}{Static/dynamic vmdk file. Single/multiple vmdk files.} & Write to two blocks from within guest. Fsync() special file after each block-write. & Use VMWare mount. Written data should be present after fsync() returns within guest. & Write block data in-place; fsync(); update vmdk header synchronously in-place. \\ \hline
HDFS & FS operations are consistent and durable. & None. & None. & Create hierarchical directories and files within directories. & Created directories and files should be retrievable after the creating operations return. & Save metadata of exposed file system within a single file using WAL. \\ \hline
\end{tabular}
