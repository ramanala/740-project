- Crash recovery is hard 
    - DB
    - ARIES
    - How long before they figured out ARIES?
    - How long before ARIES came out, and when it was proved?

- Recovery in file systems
    - Journaling and others

- Introduce the problem
    - FS consistency isn't enough
    - Above the FS - application consistency isn't important 
        - things like SQLite, databases need consistency
    - "lots of subtlety in doing this"
        - refer to the hotdep paper

- Most interesting problem we find
- Contributions

- Make reader feel the problem is real, and agree with us
- Rest of it should smoothly follow.

==============================
Intro - a little more detailed
==============================
Crash recovery is one of the fundamental problems in systems research
- hard to get right (long time since ARIES)
- hard to *prove* right (long time since ARIES was proved)

File systems need consistency too
- Have their own techniques
- journaling, etc, so on.

But file system consistency is not enough
- FS consistency cares about fs data structures, not user data
- Applications like SQLite (relational dbs), key-value stores, need to maintain
  invariants across crashes
- There is a lot of "subtlety" in how application level consistency is
  implemented.

The fs abstraction is broken
- apps need to know fs internals to be consistent
- This has not been studied before
- First contribution is to introduce "persistence properties": guarantees about
  how system calls are implemented. Apps need them, FS provide them.

Problem is how to identify such vulnerabilities?
- We introduce a tool, \toolname\, that automatically finds vulnerabilities for
  a given file system model
- \toolname\ is able to correlate vulnerabilities to actual source code
- \toolname allows us to understand the essence of the application update
  protocol, regardless of the complexity of the application code

We find 168 vulnerabilities in 12 applications. We analyze vulnerabilities and
present clear insights into how these applications interact with the file
system.

\toolname\ also provides a way to evaluate how new file-system designs affect
application-level consistency.
-> Show that delayed allocation would have been unsafe?
- We evaluate three new designs and show that they would have had benefited
  applications.

Intro draft
===========
\if 0
Crash recovery is one of the fundamental problems of systems research. It is a
hard problem -- almost a decade passed from the time commercial database
products such as SQL/DS~\cite{chamberlin1981sqldata}, System
R~\cite{chamberlin1981history}, DB2~\cite{haderle1984ibm}, and
R*~\cite{mohan1986transaction} were released to when crash recovery algorithms
such as ARIES ~\cite{MohanEtAl92-Aries} were invented. It then took close to 5
years for the algorithm to be verified~\cite{Kuo96VerifyARIES,
martin1997toward}.     
\fi


